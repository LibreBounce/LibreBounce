/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */

package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce.hud
import net.ccbluex.liquidbounce.config.*
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.utils.client.PacketUtils.sendPacket
import net.ccbluex.liquidbounce.utils.client.chat
import net.ccbluex.liquidbounce.utils.extensions.isInLiquid
import net.ccbluex.liquidbounce.utils.extensions.isMoving
import net.ccbluex.liquidbounce.utils.extensions.tryJump
import net.ccbluex.liquidbounce.utils.inventory.InventoryUtils
import net.ccbluex.liquidbounce.utils.movement.MovementUtils.airTicks
import net.minecraft.client.gui.inventory.GuiInventory
import net.minecraft.init.Items
import net.minecraft.item.ItemStack
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayClient
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.*
import net.minecraft.network.play.server.S07PacketRespawn
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.network.play.server.S32PacketConfirmTransaction
import net.minecraft.potion.Potion
import java.util.concurrent.LinkedBlockingQueue

object Disabler : Module("Disabler", Category.EXPLOIT, hideModule = false) {

    val startSprint by boolean("StartSprint", true)
    private val grimPlace by boolean("GrimPlace", false)

    private val vulcanScaffold by boolean("VulcanScaffold", false)
    private val vulcanPacketTick by int("VulcanScaffoldPacketTick", 15, 1..20) { vulcanScaffold }

    val verusFly by boolean("VerusFly", false)
    val verusCombat by boolean("VerusCombat", false)
    val onlyCombat by boolean("OnlyCombat", true) { verusCombat }

    private val intaveFly by boolean("intaveFly", false)
    private var shouldDelay = false
    private val packets = LinkedBlockingQueue<Packet<INetHandlerPlayClient>>()

    private val noRotationDisabler by boolean("NoRotationDisabler", false)
    private val modifyMode by choices(
        "Mode",
        arrayOf("ConvertNull", "Spoof", "Zero", "SpoofZero", "Negative", "OffsetYaw", "Invalid"),
        "NoRotationDisabler"
    ) { noRotationDisabler }
    private val offsetAmount by float("OffsetAmount", 6f, -180f..180f) { noRotationDisabler }

    private val basicDisabler by boolean("BasicDisabler", false)
    private val cancelC00 by boolean("CancelC00", true) { basicDisabler }
    private val cancelC0F by boolean("CancelC0F", true) { basicDisabler }
    private val cancelC0A by boolean("CancelC0A", true) { basicDisabler }
    private val cancelC0B by boolean("CancelC0B", true) { basicDisabler }
    private val cancelC07 by boolean("CancelC07", true) { basicDisabler }
    private val cancelC13 by boolean("CancelC13", true) { basicDisabler }
    private val cancelC03 by boolean("CancelC03", true) { basicDisabler }
    private val c03NoMove by boolean("C03-NoMove", true) { basicDisabler }

    private val watchdogMotion by boolean("WatchdogMotion", false)
    private val notWhenStarAvailable by boolean("NotWithStar", true) { watchdogMotion }

    private val watchdogInventory by boolean("WatchdogInventory", false)
    private var c16 = false
    private var c0d = false

    val spigotSpam by boolean("SpigotSpam", false)
    val message by text("Message", "/skill") { spigotSpam }

    private val chatDebug by boolean("ChatDebug", false)
    private val notificationDebug by boolean("NotificationDebug", false)

    private var transaction = false
    var isOnCombat = false

    private var flags = 0
    private var execute = false
    private var jump = false

    private val hasStar
        get() = InventoryUtils.findItem(36, 44, Items.nether_star) != null

    val onPacket = handler<PacketEvent> { event ->
        val player = mc.thePlayer ?: return@handler
        val packet = event.packet

        // Basic Disabler
        if (basicDisabler) {
            when (packet) {
                is C00PacketKeepAlive -> if (cancelC00) {
                    event.cancelEvent()
                    debugMessage("Cancel C00-KeepAlive")
                }

                is C0FPacketConfirmTransaction -> if (cancelC0F) {
                    event.cancelEvent()
                    debugMessage("Cancel C0F-Transaction")
                }

                is C0APacketAnimation -> if (cancelC0A) {
                    event.cancelEvent()
                    debugMessage("Cancel C0A-Swing")
                }

                is C0BPacketEntityAction -> if (cancelC0B) {
                    event.cancelEvent()
                    debugMessage("Cancel C0B-Action")
                }

                is C07PacketPlayerDigging -> if (cancelC07) {
                    event.cancelEvent()
                    debugMessage("Cancel C07-Digging")
                }

                is C13PacketPlayerAbilities -> if (cancelC13) {
                    event.cancelEvent()
                    debugMessage("Cancel C13-Abilities")
                }

                is C03PacketPlayer -> if (cancelC03 && !(packet is C04PacketPlayerPosition || packet is C05PacketPlayerLook || packet is C06PacketPlayerPosLook)) {
                    if (c03NoMove && player.isMoving) return@handler
                    event.cancelEvent()
                    debugMessage("Cancel C03-Flying")
                }
            }
        }

        // NoRotationDisabler
        if (noRotationDisabler && packet is C03PacketPlayer) {
            when (modifyMode) {
                "ConvertNull" -> {
                    if (packet.isMoving) {
                        sendPacket(
                            C04PacketPlayerPosition(
                                packet.x,
                                packet.y,
                                packet.z,
                                packet.onGround
                            )
                        )
                    } else {
                        sendPacket(C03PacketPlayer(packet.onGround))
                    }
                    event.cancelEvent()
                }

                "Spoof" -> {
                    if (packet.getRotating()) {
                        packet.yaw = player.rotationYaw
                        packet.pitch = player.rotationPitch
                    }
                }

                "Zero" -> {
                    if (packet.getRotating()) {
                        packet.yaw = 0.0f
                        packet.pitch = 0.0f
                    }
                }

                "SpoofZero" -> {
                    if (packet.isMoving) {
                        sendPacket(
                            C06PacketPlayerPosLook(
                                packet.x,
                                packet.y,
                                packet.z,
                                0.0f,
                                0.0f,
                                packet.onGround
                            )
                        )
                    } else {
                        sendPacket(
                            C06PacketPlayerPosLook(
                                player.posX,
                                player.posY,
                                player.posZ,
                                0.0f,
                                0.0f,
                                packet.onGround
                            )
                        )
                    }
                    event.cancelEvent()
                }

                "Negative" -> {
                    if (packet.getRotating()) {
                        packet.yaw = -packet.yaw
                        packet.pitch = -packet.pitch
                    }
                }

                "OffsetYaw" -> {
                    if (packet.getRotating()) {
                        packet.yaw += offsetAmount
                    }
                }
            }
        }

        /**
         * Working on Hypixel (Watchdog)
         * Tested on: play.hypixel.net
         * Credit: @localp / Nextgen
         * Original: @billionaire
         */
        if (watchdogMotion) {
            when (packet) {
                is S07PacketRespawn -> {
                    flags = 0
                    execute = false
                    jump = true
                }

                is S08PacketPlayerPosLook -> {
                    if (++flags >= 20) {
                        execute = false
                        flags = 0
                    }
                }
            }
        }

        // Watchdog Inventory
        if (watchdogInventory) {
            if (packet is C16PacketClientStatus) {
                if (c16) {
                    event.cancelEvent()
                }
                c16 = true
            }
            if (packet is C0DPacketCloseWindow) {
                if (c0d) {
                    event.cancelEvent()
                }
                c0d = true
            }
        }

        // Grim Place
        if (grimPlace) {
            if (packet is C08PacketPlayerBlockPlacement && packet.placedBlockDirection in 0..5) {
                event.cancelEvent()
                sendPacket(
                    C08PacketPlayerBlockPlacement(
                        packet.position,
                        6 + packet.placedBlockDirection * 7,
                        packet.stack,
                        packet.placedBlockOffsetX,
                        packet.placedBlockOffsetY,
                        packet.placedBlockOffsetZ
                    )
                )
                debugMessage("§cModify §aPlace §cPacket§7.")
            }
        }

        // Intave Fly
        if (intaveFly) {
            if (packet is S08PacketPlayerPosLook) {
                if (player.capabilities.isFlying) {
                    shouldDelay = true
                    debugMessage("§cStart Canceling IntaveFly")
                }
            }

            if (packet is S32PacketConfirmTransaction && shouldDelay) {
                event.cancelEvent()
                packets.add(packet as Packet<INetHandlerPlayClient>)
            }
        }

        // Verus Combat
        if (verusCombat) {
            if (player.ticksExisted <= 20) {
                isOnCombat = false
                return@handler
            }

            if (onlyCombat && !isOnCombat) {
                return@handler
            }

            /**
             * Works by just simply ignore transaction and not accepting them and send invalid one
             * to bypass Verus cancel transaction "patch" (not sending transaction for too long)
             * This could work on other anti-cheat that don't have a proper transaction handling system
             * But this will mostly be used on Verus, disabled any combat check related to transaction.
             *
             * Credit: @ghost / LB Nextgen
             */
            if (packet is S32PacketConfirmTransaction) {
                event.cancelEvent()
                sendPacket(
                    C0FPacketConfirmTransaction(
                        if (transaction) 1 else -1,
                        if (transaction) -1 else 1,
                        transaction
                    ), triggerEvent = false
                )
                transaction = !transaction
            }

            isOnCombat = false
        }
    }

    val onJump = handler<JumpEvent> { event ->
        if (!watchdogMotion) return@handler

        if (event.eventState == EventState.POST) {
            if (!jump) return@handler
            jump = false
            execute = true
        }
    }

    val onMotion = handler<MotionEvent> { event ->
        val player = mc.thePlayer ?: return@handler
        if (!watchdogMotion) return@handler
        if (event.eventState != EventState.PRE) return@handler
        if (notWhenStarAvailable && hasStar) return@handler

        if (execute && airTicks >= 10) {
            if (airTicks % 2 == 0) {
                event.x += 0.095
            }
            player.setVelocity(0.0, 0.0, 0.0)
        }
    }

    val onUpdate = handler<UpdateEvent> {
        val player = mc.thePlayer ?: return@handler

        // watchdogMotion jump
        if (watchdogMotion) {
            if (jump) {
                player.tryJump()
            }
        }

        // Watchdog Inventory
        if (watchdogInventory) {
            c16 = false
            c0d = false
            if (mc.currentScreen is GuiInventory) {
                if (player.ticksExisted % (if (player.isPotionActive(Potion.moveSpeed)) 3 else 4) == 0) {
                    sendPacket(C0DPacketCloseWindow(), false)
                } else if (player.ticksExisted % (if (player.isPotionActive(Potion.moveSpeed)) 3 else 4) == 1) {
                    sendPacket(C16PacketClientStatus(C16PacketClientStatus.EnumState.OPEN_INVENTORY_ACHIEVEMENT), false)
                }
            }
        }

        // Verus Fly
        if (verusFly) {
            if (!isOnCombat && !player.isDead) {
                val pos = player.position.add(0, if (player.posY > 0) -255 else 255, 0) ?: return@handler
                sendPacket(
                    C08PacketPlayerBlockPlacement(
                        pos,
                        256,
                        ItemStack(Items.water_bucket),
                        0F,
                        0.5F + Math.random().toFloat() * 0.44F,
                        0F
                    )
                )
            } else {
                isOnCombat = false
            }
        }

        // Vulcan Scaffold
        if (vulcanScaffold) {
            if (!(player.isInLiquid || player.isDead || player.isOnLadder)) {
                if (player.isMoving && player.ticksExisted % vulcanPacketTick == 0) {
                    sendPacket(C0BPacketEntityAction(player, C0BPacketEntityAction.Action.START_SNEAKING))
                    sendPacket(C0BPacketEntityAction(player, C0BPacketEntityAction.Action.STOP_SNEAKING))
                }
            }
        }
    }

    val onAttack = handler<AttackEvent> {
        isOnCombat = true
    }

    val onWorld = handler<WorldEvent> {
        isOnCombat = false
    }

    private fun debugMessage(msg: String) {
        if (chatDebug) {
            chat("§f$msg")
        }
        if (notificationDebug) {
            hud.addNotification(Notification("§f$msg", 1000F))
        }
    }
}
